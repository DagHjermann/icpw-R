---
title: "302_gam_testing"
format: html
editor: visual
---

## 1. Packages  
```{r, include=FALSE}

# All of these packages cn be loaded at once using library(tidyverse). (I just like to be specific.)
library(mgcv)
library(dplyr)
library(ggplot2)
library(forcats)
library(purrr)
library(tictoc)      # tic() and toc() for timing   

country_borders <- readRDS("Input_data_2023/country_borders.rda")

```

## 2. Data  

```{r}

dat <- readRDS("Input_data_2023/WISE_GWNO3_sel2.rda") %>%
  mutate(log_no3 = log10(no3))

```


## 3. Test gam on country scale   

```{r}

dat2 <- dat %>% filter(countryCode == "PL")  
dat2 <- dat %>% filter(countryCode == "FR")  

country_bord <- country_borders %>% 
  filter(region == "France",
         is.na(subregion))

```

### Stats  

#### Number of points per year  
```{r}

df_no_sites_per_year <- dat2 %>%
  distinct(countryCode, year, site) %>%
  count(year)

ggplot(df_no_sites_per_year, aes(year, n)) +
  geom_point() + geom_line()
  

```
#### Map by year  
```{r}
#| fig-height: 8
#| fig-width: 7

dat2 %>%
  distinct(countryCode, x, y, year, site) %>%
  ggplot(aes(x, y)) +
  geom_point() + 
  facet_wrap(vars(year))

```


#### Types of time series    

```{r}

df_timeseries <- dat2 %>%
  distinct(countryCode, year, site, x, y) %>%
  group_by(countryCode, site, x, y) %>%
  summarize(
    min_year = min(year),
    max_year = max(year),
    n_year = length(unique(year)), .groups = "drop"
  ) %>%
  mutate(
    n_holes = max_year - min_year - n_year + 1
  )

df_timeseries_summ <- df_timeseries %>%
  count(countryCode, min_year, max_year, n_year, n_holes, name = "Number_of_sites") %>%
  arrange(desc(Number_of_sites)) %>%
  mutate(
    n_perc = Number_of_sites/sum(Number_of_sites)*100,
    n_cum_perc = cumsum(n_perc)) 

df_timeseries_summ %>% 
  filter(n_cum_perc < 80) 

```

#### "Holey-ness" of time series    

```{r}

ggplot(df_timeseries_summ, aes(n_year, n_holes, size = Number_of_sites)) +
  geom_point() +
  labs(title = "All time series")

ggplot(df_timeseries_summ %>% filter(max_year >= 2020), aes(n_year, n_holes, size = Number_of_sites)) +
  geom_point() +
  labs(title = "Last year >= 2020")

```


#### Spatial patterns for two years with most data    
```{r}

yrs <- df_no_sites_per_year %>%
  arrange(desc(n)) %>%
  pull(year) %>%
  head(2)

dat2 %>%
  filter(year %in% yrs) %>%
  ggplot(aes(x, y)) +
  geom_point(aes(fill = no3, color = loq), pch = 21) +
  scale_fill_viridis_c() +
  scale_color_manual(values = c("black", "red")) +
  facet_wrap(vars(year))

dat2 %>%
  filter(year %in% yrs) %>%
  ggplot(aes(x, y)) +
  geom_point(aes(fill = log_no3, color = loq), pch = 21) +
  scale_fill_viridis_c() +
  scale_color_manual(values = c("black", "red")) +
  facet_wrap(vars(year))


```

### Spatial GAM, single year(s)  

* Different types of splines  
* No big difference  

#### Analysis using thin-plate splines  

```{r}

# test_mod1 <- gam(log_no3 ~ s(x, y, k = 200), data = dat2 %>% filter(year == 2019), method = "REML")  
# saveRDS(test_mod1, "Data/302_test_mod1.rds")
test_mod1 <- readRDS("Data/302_test_mod1.rds")

cat("R-sq =", summary(test_mod1)$r.sq, "\n")  

grid.x <- seq(min(dat2$x), max(dat2$x), by = 10)
grid.y <- seq(min(dat2$y), max(dat2$y), by = 10)
pdata <- expand.grid(x = grid.x, y = grid.y)

# names(pdata) <- c("os_x","os_y")
##predictions
pdata <- transform(pdata, log_no3 = predict(test_mod1, pdata, type = "response"))

ggplot(pdata, aes(x = x, y = y)) +
  geom_raster(aes(fill = log_no3)) +
  scale_fill_viridis_c(limits = c(-2,2.5)) +
  geom_point(
    data = dat2 %>% filter(year %in% 2019), 
    aes(color = log_no3)) +
  annotate("path", x = country_bord$x, y = country_bord$y) +
  scale_color_viridis_c(limits = c(-2,2.5))

  

```

#### Analysis using tensor splines     
```{r}

# test_mod2 <- gam(log_no3 ~ te(x, y, k = 20), data = dat2 %>% filter(year == 2019), method = "REML")
# saveRDS(test_mod2, "Data/302_test_mod2.rds")
test_mod2 <- readRDS("Data/302_test_mod2.rds")

cat("R-sq =", summary(test_mod2)$r.sq, "\n")    

grid.x <- seq(min(dat2$x), max(dat2$x), by = 10)
grid.y <- seq(min(dat2$y), max(dat2$y), by = 10)
pdata <- expand.grid(x = grid.x, y = grid.y)

# names(pdata) <- c("os_x","os_y")
##predictions
pdata <- transform(pdata, log_no3 = predict(test_mod2, pdata, type = "response"))

ggplot(pdata, aes(x = x, y = y)) +
  geom_raster(aes(fill = log_no3)) +
  scale_fill_viridis_c(limits = c(-2,2.5)) +
  geom_point(
    data = dat2 %>% filter(year %in% 2019), 
    aes(color = log_no3)) +
  annotate("path", x = country_bord$x, y = country_bord$y) +
  scale_color_viridis_c(limits = c(-2,2.5))

  

```

#### Analysis using adaptive splines    

```{r}

# parameters taken from ?smooth.construct.ad.smooth.spec

# test_mod3 <- gam(log_no3 ~ s(x, y, bs = "ad", k = 15, m = 3), gamma = 1.4,
#            data = dat2 %>% filter(year == 2019), method = "REML")
# saveRDS(test_mod3, "Data/302_test_mod3.rds")
test_mod3 <- readRDS("Data/302_test_mod3.rds")

cat("R-sq =", summary(test_mod3)$r.sq, "\n")  

grid.x <- seq(min(dat2$x), max(dat2$x), by = 10)
grid.y <- seq(min(dat2$y), max(dat2$y), by = 10)
pdata <- expand.grid(x = grid.x, y = grid.y)

# names(pdata) <- c("os_x","os_y")
##predictions
pdata <- transform(pdata, log_no3 = predict(test_mod3, pdata, type = "response"))

ggplot(pdata, aes(x = x, y = y)) +
  geom_raster(aes(fill = log_no3)) +
  scale_fill_viridis_c(limits = c(-2,2.5)) +
  geom_point(
    data = dat2 %>% filter(year %in% 2019), 
    aes(color = log_no3)) +
  annotate("path", x = country_bord$x, y = country_bord$y) +
  scale_color_viridis_c(limits = c(-2,2.5))

```



### Analysis over time, 10 years     

#### Test with just 10 years  
```{r}

dat3 <- dat2 %>% filter(year >= 2010)
range(dat3$year)

# Note: SLOW (ca 10 minutes?)
# test_mod4 <- gam(log_no3 ~ s(x, y, year, k = 400), data = dat3, method = "REML")
# saveRDS(test_mod4, "Data/302_test_mod4.rds")

test_mod4 <- readRDS("Data/302_test_mod4.rds")

summary(test_mod4)$r.sq  # 0.49!

```
#### Visualise  
```{r}

yrs <- c(2010, 2020)

grid.x <- seq(min(dat2$x), max(dat2$x), by = 10)
grid.y <- seq(min(dat2$y), max(dat2$y), by = 10)
pdata_grid10yr <- expand.grid(x = grid.x, y = grid.y)  
pdata_grid10yr <- bind_rows(
  transform(pdata_grid10yr, year = yrs[1]),
  transform(pdata_grid10yr, year = yrs[2])
)

# names(pdata_grid10yr) <- c("os_x","os_y")
##predictions
# Ca 25 seconds  
pdata_grid10yr <- transform(pdata_grid10yr, log_no3 = predict(test_mod4, pdata_grid10yr, type = "response"))

ggplot(pdata_grid10yr, aes(x = x, y = y)) +
  geom_raster(aes(fill = log_no3)) +
  scale_fill_viridis_c(limits = c(-2,2.5)) +
  geom_point(
    data = dat2 %>% filter(year %in% yrs), 
    aes(color = log_no3)) +
  scale_color_viridis_c(limits = c(-2,2.5)) +
  annotate("path", x = country_bord$x, y = country_bord$y) +
  facet_wrap(vars(year))

```

#### Visualise difference   
```{r}

pdata_diff <- pdata_grid10yr %>% filter(year == 2020)
pdata_diff$log_no3 <- (pdata_grid10yr %>% filter(year == 2020) %>% pull(log_no3)) -
 (pdata_grid10yr %>% filter(year == 2010) %>% pull(log_no3))

ggplot(pdata_diff, aes(x = x, y = y)) +
  geom_raster(aes(fill = log_no3)) +
  scale_fill_viridis_c(limits = c(-2,2.5)) 

```

### Analysis over time, all years  
```{r}

# Note: SLOW (ca 10 minutes?)
# tictoc::tic()
# mod_fr_1 <- gam(log_no3 ~ s(x, y, year, k = 600), data = dat2, method = "REML")
# tictoc::toc()
# 2767.81 sec elapsed
# 2767/60 = 46 min

# saveRDS(mod_fr_1, "Data/302_mod_fr_1.rds")

mod_fr_1 <- readRDS("Data/302_mod_fr_1.rds")

cat("R-sq =", summary(mod_fr_1)$r.sq, "\n")  


```

#### Visualise  
```{r}

# range(dat2$year)
yrs <- c(1992, 2000, 2010, 2020)

grid.x <- seq(min(dat2$x), max(dat2$x), by = 10)
grid.y <- seq(min(dat2$y), max(dat2$y), by = 10)
pdata_grid <- expand.grid(x = grid.x, y = grid.y)  
pdata_grid <- bind_rows(
  transform(pdata_grid, year = yrs[1]),
  transform(pdata_grid, year = yrs[2]),
  transform(pdata_grid, year = yrs[3]),
  transform(pdata_grid, year = yrs[4])
)

# predictions
# Ca 25 seconds  
if (FALSE){
  tic()
  pdata_grid <- transform(pdata_grid, log_no3 = predict(mod_fr_1, pdata_grid, type = "response"))
  toc()   # 68 seconds for 42000 rows  
  saveRDS(pdata_grid, "Data/302_pdata_grid_fr.rds")
}

pdata_grid <- readRDS("Data/302_pdata_grid_fr.rds")

ggplot(pdata_grid, aes(x = x, y = y)) +
  geom_raster(aes(fill = log_no3)) +
  scale_fill_viridis_c(limits = c(-2,2.5)) +
  annotate("path", x = country_bord$x, y = country_bord$y) +
  facet_wrap(vars(year)) +
  labs(title = "Prediction only")

ggplot(pdata_grid, aes(x = x, y = y)) +
  geom_raster(aes(fill = log_no3)) +
  scale_fill_viridis_c(limits = c(-2,2.5)) +
  geom_point(
    data = dat2 %>% filter(year %in% yrs), color = "black", size = rel(1.3)) +
  geom_point(
    data = dat2 %>% filter(year %in% yrs), 
    aes(color = log_no3), size = rel(1)) +
  scale_color_viridis_c(limits = c(-2,2.5)) +
  annotate("path", x = country_bord$x, y = country_bord$y) +
  facet_wrap(vars(year)) +
  labs(title = "Prediction plus observations")

```

#### Development over time for arbitrary points     

* For some random points  

```{r}

x <- c(2000, 1875, 2125, 1750, 2000, 2250, 1750, 2000, 2250)  
y <- c(2125, 2000, 2000, 1800, 1800, 1800, 1500, 1500, 1500)  
point_no <- 1:9

ggplot(country_bord, aes(x,y)) +
  geom_path() +
  annotate("text", x=x, y=y, label = point_no)  

pdata_points <- data.frame(x=x, y=y, point_no = point_no)  
pdata_points <- 1992:2020 %>% map_dfr(~mutate(pdata_points, year = .))
pdata_points <- transform(pdata_points, log_no3 = predict(mod_fr_1, pdata_points, type = "response"))

ggplot(pdata_points, aes(year, log_no3)) +
  geom_line() +
  facet_wrap(vars(point_no))

# Relative to first point  
pdata_points <- pdata_points %>%
  group_by(point_no) %>%
  mutate(log_no3_1 = first(log_no3),
         log_no3_rel = log_no3 - log_no3_1)

ggplot(pdata_points, aes(year, log_no3_rel, group = point_no, color = factor(point_no))) +
  geom_line()


```


### Development over time for selected stations         

* For some random points  

#### Predicted vs actually observed  
```{r}

# Pick data series lasting at least 2000-2020, but with some holes in them  
df_timeseries %>%
  filter(
    max_year == 2020,
    min_year <= 2000,
    n_holes >= 5) %>% # View("sites")    # used this to pick some example series
  ggplot(aes(x,y)) +
  geom_path(data = country_bord) +
  geom_point() +
  geom_text(aes(label = site), hjust = 0, nudge_x = 15, size = 3)  

#
# Pick sites and start prediction data series
#
sites <- c("FR00103X0308-F3", "FR00436X0069-HY",  "FR07346X0013-HY", "FR04318X0017-HYAEP", "FR06477X0026-S")  
data_sites <- dat2 %>%
  filter(site %in% sites)
pdata_sites <- data_sites %>%
  count(countryCode, site, x, y)

ggplot(pdata_sites, aes(x,y)) +
  geom_path(data = country_bord) +
  geom_point() +
  geom_text(aes(label = site), hjust = 0, nudge_x = 15, size = 3)

#
# Predict for all years  
#
pdata_sites <- 1992:2020 %>% map_dfr(~mutate(pdata_sites, year = .))
# if (FALSE){
tic()
predicted <- predict(mod_fr_1, pdata_sites, type = "response", se.fit = TRUE)
#  saveRDS(predicted, "302_test_predict01.rds")
toc()  # 7 seconds for 5 sites 
# }
#predicted <- readRDS("302_test_predict01.rds")
pdata_sites <- transform(pdata_sites, log_no3 = predicted$fit, log_no3_se = predicted$se.fit)

ggplot(pdata_sites, aes(year, log_no3)) +
  geom_line() +
  geom_point(data = data_sites) +
  facet_wrap(vars(site))

```

#### Model residuals using linear model  
```{r}

data_sites <- data_sites %>%
  left_join(
    pdata_sites %>% select(site,year,log_no3,log_no3_se) %>% rename(log_no3_pred = log_no3),
    by = c("site", "year")) %>%
  mutate(
    log_no3_res = log_no3 - log_no3_pred
  )

ggplot(data_sites, aes(year, log_no3)) +
  geom_point() +
  geom_point(aes(y = log_no3_pred), shape = 1) +
  facet_wrap(vars(site))

ggplot(data_sites, aes(year, log_no3_res)) +
  geom_point() +
  facet_wrap(vars(site))

```

#### Predict residuals for a single site  
```{r}

data_single_site <- data_sites %>% filter(site %in% sites[3])
mod_res_test <- gam(log_no3_res ~ s(year, k = 4), data = data_single_site)
summary(mod_res_test)
predicted <- predict(mod_res_test, se.fit = TRUE)
data_single_site$log_no3_res_est <- predicted$fit
data_single_site$log_no3_res_se <- predicted$se.fit

ggplot(data_single_site, aes(year, log_no3_res)) +
  geom_point() +
  geom_point(aes(y = log_no3_res_est), shape = 5)

ggplot(data_single_site, aes(year, log_no3_res)) +
  geom_point() +
  geom_pointrange(aes(y = log_no3_res_est, 
                      ymin = log_no3_res_est - 2*log_no3_res_se, 
                      ymax = log_no3_res_est + 2*log_no3_res_se), shape = 5)

```

#### Predict residuals for all selected sites  
```{r}

add_resid_est <- function(data){
  sel <- !is.na(data$log_no3_res)
  model_resid <- gam(log_no3_res ~ s(year, k = 4), data = data[sel,])
  predicted <- predict(model_resid, newdata = data, se.fit = TRUE)
  # data$log_no3_res_est <- NA
  # data$log_no3_res_se <- NA
  # data$log_no3_res_est[sel] <- predicted$fit
  # data$log_no3_res_se[sel] <- predicted$se.fit
  data$log_no3_res_est <- predicted$fit
  data$log_no3_res_se <- predicted$se.fit
  data
}

data_sites <- data_sites %>% split(.$site) %>% map_dfr(add_resid_est)

ggplot(data_sites, aes(year, log_no3_res)) +
  geom_point() +
  geom_pointrange(aes(y = log_no3_res_est,
                      ymin = log_no3_res_est - 2*log_no3_res_se,
                      ymax = log_no3_res_est + 2*log_no3_res_se), shape = 5) +
  facet_wrap(vars(site))

```

#### Predict no3 for all selected sites, all years   
```{r}

pdata_sites2 <- pdata_sites %>% 
  rename(
    log_no3_pred1 = log_no3,
    log_no3_se1 = log_no3_se) %>%
  left_join(data_sites %>% select(site, year, log_no3) %>% rename(log_no3_obs = log_no3)) %>%
  mutate(log_no3_res = log_no3_obs - log_no3_pred1) %>%
  split(.$site) %>%
  map_dfr(add_resid_est) %>%
  mutate(
    log_no3_pred2 = log_no3_pred1 + log_no3_res_est,
    log_no3_se2 = sqrt(log_no3_se1^2 + log_no3_res_se^2)
  )

ggplot(pdata_sites2, aes(year, log_no3_obs)) +
  geom_pointrange(aes(y = log_no3_pred2,
                      ymin = log_no3_pred2 - 2*log_no3_se2,
                      ymax = log_no3_pred2 + 2*log_no3_se2), shape = 5) +
  geom_point(color = "red2") +
  facet_wrap(vars(site))

ggplot(pdata_sites2, aes(year, log_no3_obs)) +
  geom_ribbon(
    aes(ymin = log_no3_pred2 - 2*log_no3_se2,
        ymax = log_no3_pred2 + 2*log_no3_se2), fill = "lightblue") +
  geom_line(aes(y = log_no3_pred2)) +
  geom_line(aes(y = log_no3_pred1), color = "green3") +
  geom_point(color = "red2") +
  facet_wrap(vars(site))


```

### For all sites   

#### Get predictions  
```{r}

#
# Pick sites and start prediction data series
#
data_sites <- dat2
pdata_sites <- data_sites %>%
  count(countryCode, site, x, y)
nrow(pdata_sites)
# 2695 rows

#
# Predict no3 for all years using spatial model    
# - log_no3_pred1 and log_no3_se1
#
pdata_sites <- 1992:2020 %>% map_dfr(~mutate(pdata_sites, year = .)) 
nrow(pdata_sites)  
# 78155 rows
2695*(2020-1992+1)

if (FALSE){
  tic()
  predicted <- predict(mod_fr_1, pdata_sites, type = "response", se.fit = TRUE)
  toc()  # 203 seconds for 78000 rows   
  saveRDS(predicted, "302_mod_fr_1_pred1.rds")
}

predicted <- readRDS("302_mod_fr_1_pred1.rds")  

pdata_sites <- transform(pdata_sites, 
                         log_no3_pred1 = predicted$fit, 
                         log_no3_se1 = predicted$se.fit)

# 2.2 million rows  

#
# Get residuals
# Model residuals and add predicted residuals (using 'add_resid_est')  
# - log_no3_res_est and log_no3_res_se  
# Combine to add   
# - log_no3_pred1 and log_no3_se1
# 
tic()
pdata_sites2 <- pdata_sites %>% 
  left_join(data_sites %>% select(site, year, log_no3) %>% rename(log_no3_obs = log_no3)) %>%
  mutate(log_no3_res = log_no3_obs - log_no3_pred1) %>%
  split(.$site) %>%
  map_dfr(add_resid_est) %>%
  mutate(
    log_no3_pred2 = log_no3_pred1 + log_no3_res_est,
    log_no3_se2 = sqrt(log_no3_se1^2 + log_no3_res_se^2)
  )
toc()  # 203 seconds for 78000 rows   
saveRDS(pdata_sites2, "302_mod_fr_1_pred2.rds")



```

